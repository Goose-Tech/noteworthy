import pytest
from noteworthy.cli import NoteworthyCLI, cli_method


class TestController:

    command_name = 'test'

    @cli_method
    def say_hi_autogen_help(self, name: str, fav_color: str = 'green'):
        '''This is a description of the method.
            ---
            Args:
                name: Name to say hello to
                fav_color: Your favorite color
        '''
        self.called = True
        self.args = [name]

    @cli_method
    def say_hi_incomplete_docstring(self, name: str, fav_color: str = 'green'):
        '''\
        ---
        Args:
            bullshit: yea
        '''
        self.called = True
        self.args = [name]

    @cli_method
    def say_hi_no_docstring(self, name, fav_color = 'green'):
        self.called = True
        self.args = [name, fav_color]

    @staticmethod
    @cli_method
    def say_hi_static(name):
        return name

    @cli_method
    def say_hi_malformed_docstring(self, name, fav_color = 'green'):
        '''
        ---
        Args:
            Broken
        - Malformed docstring
        '''
        self.called = True
        self.args = [name, fav_color]

    @cli_method
    def say_hi_missing_arg_key(self, name):
        '''
        Valid yaml but not allowed.
        ---
        '''
        pass

    def say_hi_unregistered(self, name):
        return name


def test_cli():
    '''
    Test invocation calls method with args
    '''
    cli = NoteworthyCLI()
    cli.register_controller(TestController)

    # Make sure we can call a method that has ArgParser help autogenerated
    argv = ['notectl', 'test', 'say_hi_autogen_help', 'Mo']
    cli.dispatch(argv)
    assert cli.controller_instances['test'].called == True
    assert 'Mo' in cli.controller_instances['test'].args

    # # Make sure ArgParser help is generated properly
    # argv = ['notectl', 'test', 'say_hi_autogen_help', '-h']
    # cli.dispatch(argv)

    # Make sure a useful error is reported when docstring is YAML
    # but doesn't match method's argspec
    argv = ['notectl', 'test', 'say_hi_incomplete_docstring', 'Mo']
    with pytest.raises(Exception) as execinfo:
        cli.dispatch(argv)
        assert 'missing args: name, fav_color' in execinfo

    # Make sure we can call a method without a docstring
    argv = ['notectl', 'test', 'say_hi_no_docstring', 'Mo', 'red']
    cli.dispatch(argv)
    assert cli.controller_instances['test'].called == True
    assert 'Mo' in cli.controller_instances['test'].args
    assert 'red' in cli.controller_instances['test'].args

    # Make sure we can call static methods
    argv = ['notectl', 'test', 'say_hi_static', 'Mo']
    result = cli.dispatch(argv)
    assert result == 'Mo'

    # Make sure calling an unregistered method raises
    argv = ['notectl', 'test', 'say_hi_unregistered', 'Mo']
    with pytest.raises(Exception) as execinfo:
        cli.dispatch(argv)
    assert 'not registered for CLI' in str(execinfo)

    argv = ['notectl', 'test', 'say_hi_malformed_docstring']
    with pytest.raises(Exception) as execinfo:
        cli.dispatch(argv)
    assert 'Unable to parse docstring; not valid YAML.' in str(execinfo)

    # Docstring is valid YAML but missing "Arg" key
    argv = ['notectl', 'test', 'say_hi_missing_arg_key']
    with pytest.raises(Exception) as execinfo:
        cli.dispatch(argv)
    assert 'Docstring YAML missing Args key.' in str(execinfo)
