#!/usr/bin/python3

import os
import random
import socket
import sys

import yaml

from noteworthy import wg_lib as wg


def get_ssh_client_ip():
    return os.environ['SSH_CLIENT'].split()[0]

def read_yaml_file(filename):
    with open(filename, 'r') as peer_file:
        res = yaml.safe_load(peer_file.read())
    return res

def get_peer_set():

    peers = [read_yaml_file('/tmp/'+peer_yaml_path)\
            for peer_yaml_path in os.listdir('/tmp')\
            if '@hub' in peer_yaml_path and '.yaml' in peer_yaml_path]
    return {
        'peers': peers
    }

def is_known(peer_name):
    return os.path.exists(f'/tmp/{peer_name}.yaml')

def store_peer(peer_name, pubkey, overlay_ip, endpoint):
    peer = {
                peer_name: {
                            'endpoint': f'{endpoint}:18521',
                            'pubkey': pubkey,
                            'allowed-ips': f'{overlay_ip}/24',
                            'overlay-ip': overlay_ip
                           }
    }

    with open(f'/tmp/{peer_name}.yaml', 'w') as peer_file:
        peer_file.write(yaml.dump(peer))

def get_ip_reservation():
    d = random.randint(1,254)
    return f'10.0.0.{d}'

print('---')
print('''# PeerHub Autogenerated Peer Spec v0.1
# Decentralabs 2020''')
if len(sys.argv) != 3:
    print('Usage: hub <pubkey> [<my_ip>|dynamic]')
    sys.exit(1)
peer_name, pubkey, overlay_ip = sys.argv[2].split()


# We allow the user to specify a desired ip or 'dynamic' for a random one
if overlay_ip == 'dynamic':
    overlay_ip = get_ip_reservation()

# exit if running wg-easy-set onself
# this is bad; dont do this :(
if '@hub' in peer_name:
    print('''
name: "@hub"
ip: 0.0.0.0
peers: []''')
    sys.exit(0)
# Persist registering peer
# TODO handle updating peer info
if not is_known(peer_name):
    store_peer(peer_name, pubkey, overlay_ip, get_ssh_client_ip())

# Hub Init
# Initialize Hub on first request (maybe a bad idea? b/c complexity)
# This was a bad idea b/c other than increasing complexity it introduces a race condition
# around hub initialization :(

if not wg.is_configured('wg0'):
    config = read_yaml_file('/opt/noteworthy/noteworthy-wireguard/config.yaml')
    hub_ip = get_ip_reservation()
    wg.genkey('/tmp/private')
    wg.wg_init('wg0', f'{hub_ip}/24', '/tmp/private')
    # TODO more hardcoded badness here remove me -> 'wg1'
    store_peer(f'{socket.gethostname()}@hub', wg.pubkey('/tmp/private'), hub_ip, config['hub'])

# Add the Peer
wg.add_peer('wg0', pubkey, f"{overlay_ip}/32", f'{get_ssh_client_ip()}:18521')

peer_spec = get_peer_set()
peer_spec['ip'] = overlay_ip
peer_spec['name'] = peer_name
print(f'# Configuration for Peer: {peer_name} ({get_ssh_client_ip()})')

print(yaml.dump(peer_spec))